---
interface Props {
  startDate: string;
  endDate: string;
  activities: Record<string, string[]>;
}

const { startDate, endDate, activities } = Astro.props;
const days = Array.from({length: 5}, (_, i) => {
  const date = new Date(startDate);
  date.setDate(date.getDate() + i);
  return date;
});

// Preparamos la fecha del primer día para el script
const firstDay = days[0].toISOString().split('T')[0];
---

<div class="space-y-4">
  <h2 class="text-2xl font-bold text-indigo-700 mb-4">Calendario del Viaje</h2>
  
  <div class="grid grid-cols-1 md:grid-cols-5 gap-2">
    {days.map((date, index) => {
      const dateString = date.toISOString().split('T')[0];
      return (
        <button
          class={`p-4 rounded-lg text-center transition-all ${
            index === 0 
              ? 'bg-indigo-700 text-white' 
              : 'bg-white hover:bg-indigo-50'
          }`}
          onclick={`showActivities('${dateString}')`}
        >
          <div class="text-sm font-medium">
            {date.toLocaleDateString('es-ES', {weekday: 'short'})}
          </div>
          <div class="text-xl font-bold mt-1">
            {date.getDate()}
          </div>
        </button>
      );
    })}
  </div>
</div>

<script is:inline>
  function showActivities(date) {
    document.querySelectorAll('.day-activities').forEach(el => {
      el.style.display = el.id === `activities-${date}` ? 'block' : 'none';
    });
  }
  
  // Mostrar primer día por defecto
  document.addEventListener('DOMContentLoaded', () => {
    showActivities('${firstDay}');
  });
</script>